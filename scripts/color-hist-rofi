#!/usr/bin/env sh

HISTFILE="$XDG_CONFIG_HOME/pick-color/recent"
HISTFILETMP="$XDG_CONFIG_HOME/pick-color/recent-tmp"
HISTCOUNT=10

DELETE_ACTION=10
QUIT_ACTION=11
PASTE_ACTION=12
PICK_ACTION=13

log_to_recents() {
  echo $1 >> $HISTFILE
  cat $HISTFILE | awk '!x[$0]++' | tail -n $HISTCOUNT > $HISTFILETMP
  mv $HISTFILETMP $HISTFILE
}

row() {
  color=$1
  text=$2

  echo "<span size=\"larger\" background=\"$color\">$text</span>"
}

colorless_row() {
  text=$1

  echo "<span size=\"larger\">$text</span>"
}

action_delete() {
  color=$1
  cat $HISTFILE | grep -vE $color > $HISTFILETMP
  mv $HISTFILETMP $HISTFILE
  print_colors
}

action_quit() {
  exit 0
}

action_paste() {
  color=$(xclip -out -sel clip 2> /dev/null | grep -Po '#[\d|a-fa-f]+' | head -1)
  if [ -n "$color" ] ; then
    log_to_recents $color
  fi
  print_colors
}

action_pick() {
  # cannot start pick-color while rofi is still running, need to start a seperate process,
  # redirect stdout and stderr to /dev/null, background it and then make it ignore SIGHUP
  # (which is called when the parent exits)
  # directly after that exit rofi so that pick-color can work properly

  # this is quite a difficult thing to get to work & debug :/
  nohup sh -c "pick-color && color-hist" &> /dev/null &
  exit 0
}

action_default() {
  color=$1
  if [ -n "$color" ] ; then
    pick-color $color &> /dev/null
  else
    colorless_row "error"
  fi
  exit 0
}

handle_actions() {
  # the return value of rofi; this is an integer which indicates what happened while rofi was open:
  # - 0: initial call of script
  # - 1: selected an entry
  # - 2: selected a custom entry
  # - 10-28: custom keybinding 1-19 (specified by command line flags; this requires use-hot-keys to be on; which is done in setup)
  retv="$1"

  # clicked button; this includes all kinds of nasty html stuff; filter it out
  btn=$(echo $2 | grep -Po '#[\d|a-fA-F]+|paste|pick|error')
  color=$(echo $btn | grep -Po '#[\d|a-fA-F]+' | head -1)

  # need to handle buttons AFTER handling keypresses because keypresses also trigger the button action and this may not be the wanted behavior:
  # when pressing p for paste (from clipboard) the selected button should be ignored; same for pressing i for pick
  # solution: handle keypresses first, after that handle button presses

  # error
  if [ "$btn" = "error" ] ; then
    exit 1

  # deleting something (keypress "d")
  elif [ "$retv" -eq "$DELETE_ACTION" ] ; then
    action_delete $color

  # exiting (keypress "q")
  elif [ "$retv" -eq "$QUIT_ACTION" ]; then
    action_quit

  # paste (keypress 'p')
  elif [ "$retv" -eq "$PASTE_ACTION" ] ; then
    action_paste

  # pick (keypress "i")
  elif [ "$retv" -eq "$PICK_ACTION" ] ; then
    action_pick

  # paste button
  elif [ "$btn" = "paste" ] ; then
    action_paste

  # pick button
  elif [ "$btn" = "pick" ] ; then
    action_pick

  # other (selected a color)
  else
    action_default $color
  fi
}

setup() {
  echo -en "\0markup-rows\x1ftrue\n"
  echo -en "\x00use-hot-keys\x1ftrue\n"
}

print_colors() {
  cat $HISTFILE | while read line ; do row $line $line ; done
  colorless_row "paste"
  colorless_row "pick"
}

if [ "$@" ]
then
  handle_actions "$ROFI_RETV" "$1"
else
  setup
  print_colors
fi

