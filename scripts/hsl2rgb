#!/usr/bin/env python
import sys
import colorsys

BOLD   = '\033[1m'
RESET  = '\033[0m'
PINK   = '\033[35m'
WHITE  = '\033[37m'
RED    = '\033[31m'

VERSION = 'version: 0.0.1'
USAGE   = f'''
{BOLD}Usage{RESET}:
{PINK}%s{RESET} {WHITE}<h>{RESET} {WHITE}<s>{RESET} {WHITE}<l>{RESET}           # seperate h, s, l values
{PINK}%s{RESET} {WHITE}--stdin{RESET}               # read from stdin, values must be space seperated
{PINK}%s{RESET} {WHITE}--hex{RESET}                 # output as hex color
{PINK}%s{RESET} {WHITE}--short{RESET}               # output without labels ("r: " etc.; omits "#" for hex colors)

{PINK}%s{RESET} {WHITE}-v{RESET}, {PINK}%s{RESET} {WHITE}--version{RESET} # print version
{PINK}%s{RESET} {WHITE}-h{RESET}, {PINK}%s{RESET} {WHITE}--help{RESET}    # print help
'''.strip()

ERROR_ARGUMENT_COUNT = f'{RED}{BOLD}Error{RESET}{RED}: incorrect argument count {RESET}(received {WHITE}%s{RESET} non-flag arguments and {WHITE}%s{RESET} flag arguments){RESET}'
ERROR_INVALID_FLAGS = f'{RED}{BOLD}Error{RESET}{RED}: invalid flags {RESET}(the following were supplied: {WHITE}%s{RESET}){RESET}'
ERROR_INVALID_STDIN = f'{RED}{BOLD}Error{RESET}{RED}: invalid stdin {RESET}(received {WHITE}%s{RESET})'

flags_dict = {
  'h':       'help',
  'help':    'help',
  'v':       'version',
  'version': 'version',
  'stdin':   'stdin',
  'hex':     'hex',
  'short':   'short'
}

def usage(prog):
  prog = 'hsl2rgb' # ignoring this value at the moment
  return USAGE % (prog, prog, prog, prog, prog, prog, prog, prog)

def hsl_to_rgb(h, s, l):
  # python devs in their infinite wisdom decided
  # to just swap hsl to hls for some reason
  r, g, b = colorsys.hls_to_rgb(h / 360, l / 100, s / 100)
  return (round(r * 255), round(g * 255), round(b * 255))

def flatten(arr):
  return [item for sublist in arr for item in sublist]

def parse_command_line_args(all_args):

  # when not passing any arguments no error message is printed; only the usage
  if len(all_args) == 1:
    print(usage(all_args[0]), file=sys.stderr)
    sys.exit(1)

  # determine if given argument contains a flag (like '-v' or '--help')
  is_flags   = lambda arg: arg.startswith('-')
  # determine if given argument does NOT contain a flag (like '#f0f0f0')
  isnt_flags = lambda arg: not arg.startswith('-')
  # normalize flag argument (remove leading dashes; turn multiple shorthand flags into list of flags)
  get_flags  = lambda arg: arg.startswith('--') and [arg[2:]] or [char for char in arg[1:]]
  # get the long name for each flag
  to_long_flag = lambda flag: flags_dict[flag] if flag in flags_dict.values() else None

  # raw_flags are flags before getting the long name
  raw_flags = flatten(map(get_flags, filter(is_flags, all_args)))
  flags = list(map(to_long_flag, raw_flags))
  args = list(filter(isnt_flags, all_args))

  # flags containing None must mean that an unknown flag was used
  if None in flags:
    print(ERROR_INVALID_FLAGS % (f'{RESET}, {WHITE}'.join(raw_flags)), file=sys.stderr)
    sys.exit(1)

  opts = {
    'hex': 'hex' in flags,
    'short': 'short' in flags,
  }

  if len(flags) > 0:

    if flags[0] == 'version':
      print(VERSION)
      sys.exit(0)

    if flags[0] == 'help':
      print(usage(other_args[0]))
      sys.exit(0)

    if 'stdin' in flags:
      values = input('').split(' ')
      if len(values) != 3:
        print(ERROR_INVALID_STDIN % (f'{RESET} {WHITE}'.join(values)), file=sys.stderr)
        sys.exit(0)
      h = int(values[0])
      s = int(values[1])
      l = int(values[2])
      return h, s, l, opts

  # args[0] is the program name so everything seems off-by-one
  if len(args) == 4:
    h = int(args[1])
    s = int(args[2])
    l = int(args[3])
    return h, s, l, opts

  # offset len(args) by one because args[0] always contains the program name and this should be hidden from the user
  print(ERROR_ARGUMENT_COUNT % (len(args) - 1, len(raw_flags)), file=sys.stderr)
  sys.exit(1)

h, s, l, opts = parse_command_line_args(sys.argv)
r, g, b = hsl_to_rgb(h, s, l)

if opts['hex'] and opts['short']:
  print(f'{r:02x}{g:02x}{b:02x}')
elif opts['hex'] and not opts['short']:
  print(f'#{r:02x}{g:02x}{b:02x}')
elif not opts['hex'] and opts['short']:
  print(f'%d %d %d' % (r, g, b))
elif not opts['hex'] and not opts['short']:
  print(f'r: %d, g: %d, b: %d' % (r, g, b))

