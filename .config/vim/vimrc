" .vimrc

" how many lines of history VIM needs to remember
set history=500

"use system clipboard
set clipboard=unnamedplus

" if using alacritty this helps with mouse support
set ttymouse=sgr

" required for ctrl-space
set hidden

" general mouse stuff
set mouse=a

" disable timeout for escape sequences
set timeoutlen=1000 ttimeoutlen=0

" filetype plugins
filetype plugin on
filetype indent on

" how many lines of history VIM needs to remember
set history=500

"use system clipboard
set clipboard=unnamedplus

" if using alacritty this helps with mouse support
set ttymouse=sgr

" general mouse stuff
set mouse=a

" disable timeout for escape sequences
set timeoutlen=1000 ttimeoutlen=0

" filetype plugins
filetype plugin on
filetype indent on

set runtimepath+=$XDG_CONFIG_HOME/vim/
set packpath+=$XDG_CONFIG_HOME/vim/
let g:dracula_colorterm = 0
packadd! dracula
packadd! nerdtree
packadd! nerdtree-git-plugin


colorscheme dracula

" this may improve the quality of colors or may make it worse, depends. But worth trying out
" set termguicolors

" autoread
set autoread

" sudo save file
command W w !sudo tee % > /dev/null

" something cursor and line related
set so=7

" ignore compiled files
set wildignore=*.o,*.so,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=.git\*,.hg\*,.svn\*
else
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,*.swp
endif

" show current position and some line number / line stuff
set ruler
set number

" height of command bar
set cmdheight=1

" swap file
set noswapfile

" search stuff
set ignorecase
set smartcase

set hlsearch " highlight matches
set incsearch " search as characters are entered

" don't redraw while executing macros
set lazyredraw

" regex
set magic

" show matching brackets
set showmatch

" no bell sounds
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" enable syntax highlighting
syntax enable

if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

" text, tab, indent related

set expandtab
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set shiftwidth=2

" auto linebreak on 500 chars
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" status line
set statusline=\ %l:%c\ %{HasPaste()}%F%m%r%h\ %w\ %r%{getcwd()}%h


" utility function
function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  endif
  return ''
endfunction

" editing mapping
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" doesn't seem to work sadly (something related to alt key not being recognized correctly)
nmap <A-q> :bp<CR>

" switch between idek what they are, it's like backwards/forwards buttons
map <C-Left> <Esc>:bprev<CR>
map <C-Right> <Esc>:bnext<CR>

" switch to the next tab / the previous tab
map <C-Up> <Esc>:tabprev<CR>
map <C-Down> <Esc>:tabnext<CR>

" These shortcuts might seem like an anti-pattern as they use the arrow keys
" but these are actually intended to be used with a keyboard layout that
" maps the key right of the spacebar + hjkl to the arrow keys. This means
" that these shortcuts actually are really close to the ones below for different
" splits / panes as the only difference is additionally hitting the key right
" of the spacebar (this key is either right alt or right control depending on
" layout).


" switch to left / right / top / bottom split (mostly for Nerd Tree)
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-j> <C-W>j
map <C-k> <C-W>k

" apparently fixes something with 
autocmd FileType nerdtree noremap <buffer> <A-q> <nop>

" nerdtree stuff
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsable = '▾'

let g:NERDTreeIndicatorMapCustom = {
  \ "Modified"  : "*",
  \ "Staged"    : "+",
  \ "Untracked" : "-",
  \ "Renamed"   : "➜",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "✖",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ "Ignored"   : "_",
  \ "Unknown"   : "?",
  \ }

let NERDTreeQuitOnOpen = 1

map <C-n> :NERDTreeToggle<CR>

" create new file in same directory as current file
" nmap <C-N> :wincmd w<CR>ma

" delete current file
" helper functions

" airline stuff
let g:airline_theme = 'dracula'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline_section_y = ''

let g:airline_mode_map = {
  \ 'n': 'normal',
  \ 'no': 'n·op pending',
  \ 'v': 'visual',
  \ 'V': 'v·line',
  \ '': 'v·block',
  \ 's': 'select',
  \ 'S': 's·line',
  \ '': 's·block',
  \ 'i': 'insert',
  \ 'R': 'replace',
  \ 'Rv': 'v·replace',
  \ 'c': 'command',
  \ 'cv': 'idk (cv)',
  \ 'ce': 'idk (ce)',
  \ 'r': 'prompt',
  \ 'rm': 'more',
  \ 'r?': 'confirm',
  \ '!': 'shell',
  \ 't': 'terminal',
  \ }
